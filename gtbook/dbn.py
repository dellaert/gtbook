# AUTOGENERATED! DO NOT EDIT! File to edit: dbn.ipynb (unless otherwise specified).

__all__ = ['dbs_position', 'dbk_position', 'dbc_position', 'dbn_positions', 'dbn_writer']

# Cell
import gtsam

# Cell
def dbs_position(symbol):
    """Calculate position of a DBN Symbol"""
    chr, index  = symbol.chr(), symbol.index()
    if chr==ord('A') or chr==ord('u'): return (index,2)
    if chr==ord('X') or chr==ord('x'): return (index,1)
    if chr==ord('Z') or chr==ord('z'): return (index,0)
    if chr==ord('B'): return (index,0) # for battery example

def dbk_position(key):
    """Calculate position of a DBN Key """
    return dbs_position(gtsam.Symbol(key))

# Cell
def dbc_position(conditional):
    """Return (key,position) for a Conditional with a DBN key"""
    key = conditional.firstFrontalKey()
    return key, dbk_position(key)

# Cell
def dbn_positions(bayesNet):
    """Calculate positions for a DBN as a {key:position} dictionary"""
    positions = [dbc_position(bayesNet.at(j)) for j in range(bayesNet.size())]
    return dict(pair for pair in positions if pair[1] is not None)

# Cell
def dbn_writer(obj, **kwargs):
    """Create a DotWriter with variable positions for showing DBNs"""
    writer_or_none = kwargs["writer"] if "writer" in kwargs else None
    if not isinstance(obj, gtsam.DiscreteBayesNet): return writer_or_none
    positions = dbn_positions(obj)
    if positions=={}: return writer_or_none
    # OK, we have a DBN, so add variablePositions to writer
    writer = gtsam.DotWriter() if writer_or_none is None else writer_or_none
    vp = writer.variablePositions
    for key, position in positions.items():
        # only overwrite if not given already:
        if key not in vp: vp[key] = position
    writer.variablePositions = vp
    return writer